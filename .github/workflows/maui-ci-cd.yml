name: MAUI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'MauiApp1.csproj'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI Workload
      run: dotnet workload install maui
      
    - name: Restore NuGet packages
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: Run tests (if any)
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal
      continue-on-error: true  # Continue even if no tests exist
      
  build-android:
    name: Build Android
    needs: build-and-test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI Workload
      run: dotnet workload install maui
      
    - name: Restore NuGet packages
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build Android APK
      run: dotnet publish ${{ env.PROJECT_PATH }} -f net9.0-android -c Release
      
    - name: Upload Android APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/Release/net9.0-android/**/*.apk
        retention-days: 30
        
  build-ios:
    name: Build iOS
    needs: build-and-test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI Workload
      run: dotnet workload install maui
      
    - name: Restore NuGet packages
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build iOS
      run: dotnet build ${{ env.PROJECT_PATH }} -f net9.0-ios -c Release
      
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: bin/Release/net9.0-ios/
        retention-days: 30
        
  build-macos:
    name: Build macOS
    needs: build-and-test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI Workload
      run: dotnet workload install maui
      
    - name: Restore NuGet packages
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build macOS
      run: dotnet publish ${{ env.PROJECT_PATH }} -f net9.0-maccatalyst -c Release
      
    - name: Upload macOS app
      uses: actions/upload-artifact@v4
      with:
        name: macos-app
        path: bin/Release/net9.0-maccatalyst/**/*.app
        retention-days: 30
        
  deploy-staging:
    name: Deploy to Staging
    needs: [build-android, build-ios, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: android-apk
        path: ./android/
        
    - name: Deploy to Firebase App Distribution (Staging)
      run: |
        echo "üöÄ Deploying to Firebase App Distribution (Staging)"
        echo "APK would be deployed to test groups here"
        # Add your Firebase App Distribution deployment here
        
    - name: Notify team
      run: |
        echo "üì± Staging deployment completed!"
        echo "Android APK deployed to Firebase App Distribution"
        
  deploy-production:
    name: Deploy to Production
    needs: [build-android, build-ios, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts/
        
    - name: Deploy to Google Play Store
      run: |
        echo "üè™ Deploying to Google Play Store"
        echo "Android APK would be uploaded to Play Console here"
        # Add your Google Play Store deployment here
        
    - name: Deploy to Apple App Store
      run: |
        echo "üçé Deploying to Apple App Store"
        echo "iOS app would be uploaded to App Store Connect here"
        # Add your App Store deployment here
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## üöÄ Release v${{ github.run_number }}
          
          ### üì± What's New
          - Automated build and deployment
          - Cross-platform support (Android, iOS, macOS)
          
          ### üì¶ Artifacts
          - Android APK
          - iOS build
          - macOS app
          
          ### üîó Download Links
          Check the artifacts section below for platform-specific builds.
        draft: false
        prerelease: false